/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.29
 * Generated at: 2024-10-08 04:48:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.bbs;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import common.PageUtil;
import model1.bbs.BbsDAO;
import model1.bbs.BbsDTO;
import model1.bbs.BbsDAO;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/common/queryString.jsp", Long.valueOf(1728362801467L));
    _jspx_dependants.put("/common/header.jsp", Long.valueOf(1728362801448L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(8);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("model1.bbs.BbsDTO");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("model1.bbs.BbsDAO");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("common.PageUtil");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("<style>\n");
      out.write("main input.btn_login {margin : 10px 0; background: #fff;}\n");
      out.write("#header {text-align : right;}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<main id=\"header\">\n");

// 세션에서 로그인 정보 유무 체크
String sessionId = "";
if (session.getAttribute("user_id") == null) {
	// 로그인 정보 없을 경우 [로그인] 버튼 표시

      out.write("<input type=\"button\" id=\"btn_login\" name=\"btn_login\" class=\"btn_login\" value=\"로그인\" />\n");
      out.write("	<script>\n");
      out.write("	const btn_login = document.querySelector(\"#btn_login\");\n");
      out.write("	btn_login.addEventListener(\"click\", (e)=> {\n");
      out.write("		location.href = \"/bbsModel1/login/login.jsp\";\n");
      out.write("	})\n");
      out.write("	</script>\n");
	
} else {
	// 로그인 정보 없을 경우 [로그아웃] 버튼 표시 + sessionId 값 저장
	sessionId = (String) session.getAttribute("user_id");

      out.write("<input type=\"button\" id=\"btn_logOut\" name=\"btn_logOut\" class=\"btn_login\" value=\"로그아웃\" />\n");
      out.write("	<script>\n");
      out.write("	const btn_logOut = document.querySelector(\"#btn_logOut\");\n");
      out.write("	btn_logOut.addEventListener(\"click\", (e)=> {\n");
      out.write("		location.href = \"/bbsModel1/login/logout.jsp\";\n");
      out.write("	})\n");
      out.write("	</script>\n");

}

      out.write("</main>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");

// 값 초기화
String search_category = "";
String search_word = "";
int page_selected = 1;

// 값 할당
if (request.getParameter("search_category") != null) {
	search_category = request.getParameter("search_category");
}
if(request.getParameter("search_word") != null) {
	search_word = request.getParameter("search_word");
}
if (request.getParameter("page_selected") != null) {
	page_selected = Integer.parseInt(request.getParameter("page_selected"));
}

//QreryString 만들
String queryStringPCW = "page_selected=" + page_selected + "&search_category=" + search_category + "&search_word=" + search_word;
String queryStringCW = "search_category=" + search_category + "&search_word=" + search_word;

      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>게시판 리스트</title>\n");
      out.write("<style>\n");
      out.write("	* {margin : 0; padding : 0;}\n");
      out.write("	body {\n");
      out.write("		width : 100%;\n");
      out.write("		margin : 0 auto;\n");
      out.write("	}\n");
      out.write("	main {\n");
      out.write("		width : 1000px;\n");
      out.write("		margin : 0 auto;\n");
      out.write("	}\n");
      out.write("	h2 {\n");
      out.write("		padding : 20px;\n");
      out.write("		text-align : center;\n");
      out.write("	}\n");
      out.write("	table, tr, td, th {\n");
      out.write("		border-collapse:collapse;\n");
      out.write("		padding : 10px;\n");
      out.write("	}\n");
      out.write("	table {\n");
      out.write("		width : 100%;\n");
      out.write("		margin : 10px 0;\n");
      out.write("	}\n");
      out.write("	.border, .border tr, border th {\n");
      out.write("		border: 1px solid #aaa;		\n");
      out.write("	}\n");
      out.write("	.border td:nth-child(1), td:nth-child(3), td:nth-child(4), td:nth-child(5){\n");
      out.write("		text-align : center;\n");
      out.write("	}\n");
      out.write("	.search_area {\n");
      out.write("		border : 1px solid #aaa;\n");
      out.write("		background : #eee;\n");
      out.write("		text-align : center;\n");
      out.write("		height : 80px;\n");
      out.write("	}\n");
      out.write("	th {\n");
      out.write("		background : #e3f0ff;\n");
      out.write("	}\n");
      out.write("	input, select {\n");
      out.write("		box-sizing : border-box;\n");
      out.write("		height : 30px;\n");
      out.write("	}\n");
      out.write("	#search_word {\n");
      out.write("		width : 200px;\n");
      out.write("	}\n");
      out.write("	input[type = \"button\"], input[type = \"submit\"] {\n");
      out.write("		background : #e3f0ff;\n");
      out.write("		border : 1px solid #aaa;\n");
      out.write("		padding : 5px 10px;\n");
      out.write("	}\n");
      out.write("	a, a:link, a:hover, a:active, a:visited {\n");
      out.write("		color : #000;\n");
      out.write("		text-decoration : none;\n");
      out.write("	}\n");
      out.write("	a:hover {\n");
      out.write("		text-decoration : underline !important;\n");
      out.write("	}\n");
      out.write("	.pageArea {\n");
      out.write("		text-align : center;\n");
      out.write("		padding : 10px 0;\n");
      out.write("	}\n");
      out.write("	span {width : 30px; display : inline-block;}\n");
      out.write("	\n");
      out.write("	a.selected {\n");
      out.write("		color : blue;\n");
      out.write("		text-decoration : underline;\n");
      out.write("	}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");

// 게시글 조회 부분
// 게시글 조회를 위한 Map객체 생성 (검색영역, 검색어, 현재 페이지)
Map<String, Object> param = new HashMap<String, Object>();
param.put("search_category", search_category);
param.put("search_word", search_word);
param.put("page_selected", page_selected);

// 게시글 조회
BbsDAO dao = new BbsDAO(application);
List<BbsDTO> bbsList = dao.bbsPagingList(param);

//총 게시글 수 조회
int total_count = dao.bbsTotalCount(param);
dao.close();

//게시글 html 생성
String boardList = PageUtil.makeList(bbsList, total_count, page_selected, queryStringPCW);

// 페이징 관련 부분
//총페이지 개수 계산
int total_page = (int) Math.ceil((double)total_count / 10);

// 페이징 html 코드 만들어내기
String pageList = PageUtil.makeMageNumber(total_page, 10, page_selected, queryStringCW);


      out.write("<main>\n");
      out.write("	<h2><a href=\"list.jsp\">게시판 목록</a></h2>\n");
      out.write("	<input type=\"button\" name=\"register\" id=\"register\" value=\"게시글 작성\">\n");
      out.write("	<table class=\"search_area\">\n");
      out.write("	 <tr>	\n");
      out.write("		<td>\n");
      out.write("			<form id=\"frmSearch\" method=\"get\">\n");
      out.write("				<select name=\"search_category\" id=\"search_category\">\n");
      out.write("					<option value=\"\" ");
      out.print( (search_category.equals("") ? "selected" : "")  );
      out.write(">선택</option>\n");
      out.write("					<option value=\"title\" ");
      out.print( (search_category.equals("title") ? "selected" : "")  );
      out.write(">제목</option>\n");
      out.write("					<option value=\"content\" ");
      out.print( (search_category.equals("content") ? "selected" : "")  );
      out.write(">글내용</option>\n");
      out.write("					<option value=\"user_id\" ");
      out.print( (search_category.equals("user_id") ? "selected" : "")  );
      out.write(">작성자</option>\n");
      out.write("				</select>\n");
      out.write("				<input type=\"text\" name=\"search_word\" id=\"search_word\" value=\"");
      out.print( search_word );
      out.write("\" maxlength=\"100\">\n");
      out.write("				<input type=\"submit\" name=\"btn_search\" id=\"btn_search\" value=\"검색하기\">\n");
      out.write("			</form>\n");
      out.write("		</td>\n");
      out.write("	</tr>\n");
      out.write("	</table>\n");
      out.write("	<table class=\"border\">\n");
      out.write("		<caption style=\"display:none\">표제목</caption>\n");
      out.write("		<thead>\n");
      out.write("			<tr>\n");
      out.write("				<th>번호</th>\n");
      out.write("				<th>제목</th>\n");
      out.write("				<th>작성자</th>\n");
      out.write("				<th>조회수</th>\n");
      out.write("				<th>작성일</th>\n");
      out.write("			</tr>\n");
      out.write("		</thead>\n");
      out.write(" 		<tbody>\n");
      out.write("			");
      out.print( boardList );
      out.write("</tbody>\n");
      out.write("	</table>\n");
      out.write("	<div class=\"pageArea\">\n");
      out.write("		");
      out.print( pageList );
      out.write("</div>\n");
      out.write("</main>\n");
      out.write("<script>\n");
      out.write("// 등록페이지로 가기 이벤트\n");
      out.write("const register = document.querySelector(\"#register\");\n");
      out.write("register.addEventListener(\"click\", (e)=> {\n");
      out.write("	location.href = \"register.jsp?");
      out.print(queryStringPCW);
      out.write("\"\n");
      out.write("})\n");
      out.write("\n");
      out.write("// 검색 값 유효성 체크\n");
      out.write("const frmSearch = document.querySelector(\"#frmSearch\");\n");
      out.write("frmSearch.addEventListener(\"submit\", (e)=>{\n");
      out.write("	e.preventDefault();\n");
      out.write("	let search_category = document.querySelector(\"#search_category\").value;\n");
      out.write("	if(search_category == null || search_category == \"\") {\n");
      out.write("		document.querySelector(\"#search_category\").focus();\n");
      out.write("		return alert(\"검색조건을 선택해주세요.\");\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	let search_word = document.querySelector(\"#search_word\").value;\n");
      out.write("	if (search_word == null) {\n");
      out.write("		document.querySelector(\"#search_word\").focus();\n");
      out.write("		return alert(\"검색어를 입력해주세요.\")\n");
      out.write("	} else {\n");
      out.write("		search_word = search_word.trim();\n");
      out.write("		if(search_word == \"\") {\n");
      out.write("			document.querySelector(\"#search_word\").focus();\n");
      out.write("			return alert(\"검색어를 한 글자 이상 입력해주세요.\");\n");
      out.write("		}\n");
      out.write("	} \n");
      out.write("	frmSearch.submit();\n");
      out.write("})\n");
      out.write("\n");
      out.write("// 페이징 첫번째, 마지막 페이지 알럿\n");
      out.write("let preves = document.querySelectorAll(\".prev\");\n");
      out.write("let nextes = document.querySelectorAll(\".next\");\n");
      out.write("\n");
      out.write("for(let i of preves){\n");
      out.write("	i.addEventListener(\"click\", (e) => {\n");
      out.write("		if(");
      out.print( page_selected);
      out.write(" == 1) {\n");
      out.write("			e.preventDefault();\n");
      out.write("			alert(\"첫번째 페이지 입니다.\");\n");
      out.write("		} \n");
      out.write("	})\n");
      out.write("}\n");
      out.write("\n");
      out.write("for(let i of nextes){\n");
      out.write("	i.addEventListener(\"click\", (e) => {\n");
      out.write("		if(");
      out.print( page_selected);
      out.write(" == ");
      out.print( total_page);
      out.write(") {\n");
      out.write("			e.preventDefault();\n");
      out.write("			alert(\"마지막 페이지 입니다.\");\n");
      out.write("		} \n");
      out.write("	})\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
