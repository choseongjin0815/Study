/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.29
 * Generated at: 2024-10-07 01:04:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.bbs;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import net.fullstack7.bbs.BbsDTO;
import java.util.List;
import net.fullstack7.bbs.BbsDAO;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("net.fullstack7.bbs.BbsDAO");
    _jspx_imports_classes.add("net.fullstack7.bbs.BbsDTO");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


BbsDAO dao = new BbsDAO();
List<BbsDTO> dto = dao.getBbsList();


      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("abvddssssssssfgff\r\n");
      out.write("<h2>게시판 목록</h2>\r\n");
      out.write("<table>\r\n");
      out.write("		<tr style=\"background-color : grey\">\r\n");
      out.write("			<th>선택</th>\r\n");
      out.write("			<th>번호</th>\r\n");
      out.write("			<th>제목</th>\r\n");
      out.write("			<th>작성자</th>\r\n");
      out.write("			<th>조회수</th>\r\n");
      out.write("			<th>등록일</th>\r\n");
      out.write("			<th>삭제</th>\r\n");
      out.write("		</tr>\r\n");
      out.write("	\r\n");
      out.write("	<tbody>\r\n");
      out.write("	<form id=\"frmList\" action=\"delete_ok.jsp\">\r\n");
      out.write("		");

		for(BbsDTO bbsEl : dto) {
		
      out.write("<tr>\r\n");
      out.write("			<td><input type=\"checkbox\" id=\"bbs_idx\" name=\"bbs_idx\" value=\"");
      out.print(bbsEl.getIdx());
      out.write("\"/> </td>\r\n");
      out.write("			<td>");
      out.print(bbsEl.getIdx() );
      out.write("</td>\r\n");
      out.write("			<td><a id=\"readBbsEl\" href=\"view.jsp?idx=");
      out.print(bbsEl.getIdx());
      out.write('"');
      out.write('>');
      out.print(bbsEl.getTitle());
      out.write("</a> </td>\r\n");
      out.write("			<td>");
      out.print(bbsEl.getMemberId());
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print(bbsEl.getReadCnt() );
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print(bbsEl.getRegDate());
      out.write("</td>\r\n");
      out.write("			<td>삭제</td>\r\n");
      out.write("			\r\n");
      out.write("		</tr>\r\n");
      out.write("		");

		}
		
      out.write("<tr>\r\n");
      out.write("			<td colspan=\"7\">등록된 게시물이 존재하지 않습니다.</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=\"7\"> <<1 | 2 | 3>> </td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=\"7\"> \r\n");
      out.write("				<input type=\"submit\" id=\"btnRegist\" name=\"btnRegist\" value=\"등록\">\r\n");
      out.write("				<button onclick=\"frmDelete()\">삭제</button>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("	</form>\r\n");
      out.write("</table>\r\n");
      out.write("<script>\r\n");
      out.write("function frmDelete(e) {\r\n");
      out.write("	e.preventDefault();\r\n");
      out.write("	const frmL = document.querySelector(\"#frmList\");\r\n");
      out.write("	frmL.action = \"delete_ok.jsp\";\r\n");
      out.write("	frmL.submit();\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
