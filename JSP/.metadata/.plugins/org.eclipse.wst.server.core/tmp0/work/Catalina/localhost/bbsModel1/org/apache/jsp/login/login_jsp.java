/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.29
 * Generated at: 2024-10-08 04:48:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.login;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>로그인</title>\n");
      out.write("<style>\n");
      out.write("	* {margin : 0; padding : 0;}\n");
      out.write("	body {\n");
      out.write("		width : 100%;\n");
      out.write("		margin : 0 auto;\n");
      out.write("	}\n");
      out.write("	main {\n");
      out.write("		width : 1000px;\n");
      out.write("		margin : 0 auto;\n");
      out.write("	}\n");
      out.write("	h2 {\n");
      out.write("		padding : 20px;\n");
      out.write("		text-align : center;\n");
      out.write("	}\n");
      out.write("	table, tr, td, th {\n");
      out.write("		border-collapse:collapse;\n");
      out.write("		padding : 10px;\n");
      out.write("	}\n");
      out.write("	table {\n");
      out.write("		width : 100%;\n");
      out.write("		margin : 10px 0;\n");
      out.write("	}\n");
      out.write("	.border, .border tr, border th {\n");
      out.write("		border: 1px solid #aaa;		\n");
      out.write("	}\n");
      out.write("	.border td:nth-child(1), td:nth-child(3), td:nth-child(4), td:nth-child(5){\n");
      out.write("		text-align : center;\n");
      out.write("	}\n");
      out.write("	.search_area {\n");
      out.write("		border : 1px solid #aaa;\n");
      out.write("		background : #eee;\n");
      out.write("		text-align : center;\n");
      out.write("		height : 80px;\n");
      out.write("	}\n");
      out.write("	th {\n");
      out.write("		background : #e3f0ff;\n");
      out.write("	}\n");
      out.write("	input, select {\n");
      out.write("		box-sizing : border-box;\n");
      out.write("		height : 30px;\n");
      out.write("	}\n");
      out.write("	#search_word {\n");
      out.write("		width : 200px;\n");
      out.write("	}\n");
      out.write("	input[type = \"button\"], input[type = \"submit\"] {\n");
      out.write("		background : #e3f0ff;\n");
      out.write("		border : 1px solid #aaa;\n");
      out.write("		padding : 5px 10px;\n");
      out.write("	}\n");
      out.write("	a, a:link, a:hover, a:active, a:visited {\n");
      out.write("		color : #000;\n");
      out.write("		text-decoration : none;\n");
      out.write("	}\n");
      out.write("	a:hover {\n");
      out.write("		text-decoration : underline !important;\n");
      out.write("	}\n");
      out.write("	.warnning {\n");
      out.write("		color : red;\n");
      out.write("		text-align : center;\n");
      out.write("		font-weight : 800;\n");
      out.write("	}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");

// 기존 로그인 정보 여부 체크
if (session.getAttribute("user_id") != null) {
	out.print("<script>alert(" +"'이미 로그인되어있습니다. 게시판 리스트로 이동합니다.'" + ");location.href='/bbsModel1/bbs/list.jsp';</script>");
	//response.sendRedirect("/bbsModel1/bbs/list.jsp");
}
// 로그인 실패 정보 확인
String fail = "";
if(request.getAttribute("errMsg") != null) {
	fail = "로그인 실패";
	
}

      out.write("<main>\n");
      out.write("\n");
      out.write("<h2>로그인</h2>\n");
      out.write("<p class=\"warnning\">");
      out.print( fail );
      out.write("</p>\n");
      out.write("<form action=\"login_ok.jsp\" method=\"post\" id=\"frmLogin\">\n");
      out.write("	<table class=\"border\">\n");
      out.write("			<tr>\n");
      out.write("				<td>아이디 : <input type=\"text\" name=\"user_id\" id=\"user_id\" value=\"\" placeholder=\"아이디\" /></td>\n");
      out.write("				<td>비밀번호 : <input type=\"password\" name=\"pwd\" id=\"pwd\" value=\"\" placeholder=\"비밀번호\" /></td>\n");
      out.write("				<td><input type=\"submit\" name=\"btn_login\" id=\"btn_login\" value=\"로그인\"/></td>\n");
      out.write("			</tr>\n");
      out.write("	</table>\n");
      out.write("</form>\n");
      out.write("<input type=\"button\" id=\"btn_list\" name=\"btn_list\" class=\"btn_list\" value=\"리스트\" />\n");
      out.write("\n");
      out.write("</main>\n");
      out.write("<script>\n");
      out.write("	const frmLogin = document.querySelector(\"#frmLogin\");\n");
      out.write("	frmLogin.addEventListener(\"submit\", (e)=>{\n");
      out.write("		e.preventDefault();\n");
      out.write("		let user_id = document.querySelector(\"#user_id\");\n");
      out.write("		let user_idVal = user_id.value;\n");
      out.write("		let pwd = document.querySelector(\"#pwd\");\n");
      out.write("		let pwdVal = pwd.value;\n");
      out.write("		\n");
      out.write("		if (!user_idVal) {\n");
      out.write("			user_id.focus();\n");
      out.write("			alert(\"아이디를 입력해주세요\");\n");
      out.write("			return ;\n");
      out.write("		} else {\n");
      out.write("			user_idVal = user_idVal.trim();\n");
      out.write("			if (user_idVal == \"\") {\n");
      out.write("				user_id.focus();\n");
      out.write("				alert(\"아이디를 입력해주세요\");\n");
      out.write("				return;\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		if (!pwdVal) {\n");
      out.write("			pwd.focus();\n");
      out.write("			alert(\"비밀번호를 입력해주세요\");\n");
      out.write("			return;\n");
      out.write("		} else {\n");
      out.write("			pwdVal = pwdVal.trim();\n");
      out.write("			if (pwdVal == \"\") {\n");
      out.write("				pwd.focus();\n");
      out.write("				alert(\"비밀번호를 입력해주세요\");\n");
      out.write("				return;\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("		frmLogin.submit();\n");
      out.write("	})\n");
      out.write("	\n");
      out.write("	const btn_list = document.querySelector(\"#btn_list\");\n");
      out.write("	btn_list.addEventListener(\"click\", (e)=> {\n");
      out.write("		location.href = \"/bbsModel1/bbs/list.jsp\";\n");
      out.write("	})\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
